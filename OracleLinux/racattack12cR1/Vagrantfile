## -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

#############################
## 20140407
## Alvaro Miranda
## http://kikitux.net
## alvaro at kikitux.net
#############################
##### END CUSTOMIZATION #####
#############################
#define number of nodes
NUM_APPLICATION 	= 0
NUM_LEAF_INSTANCES	= 0
NUM_DB_INSTANCES	= 2
#
#define number of cores for guest
NUM_CORE=1
#
#define memory for each type of node in MBytes
#
#for leaf nodes, the minimun can be  2200, otherwise pre-check will fail for
#automatic ulimit values calculated based on ram
#
#for database nodes, the minimum suggested is 3072
#
MEMORY_APPLICATION 	= 1500
MEMORY_LEAF_INSTANCES	= 2300
MEMORY_DB_INSTANCES	= 960
#        
#size of shared disk in GB
size_file_to_dbdisk	= 3.25
#
#############################
##### END CUSTOMIZATION #####
#############################

nodes=""
(1..NUM_APPLICATION).each do |i|
 nodes="collaba#{i} #{nodes}"
end
(1..NUM_LEAF_INSTANCES).each do |i|
 nodes="collabl#{i} #{nodes}"
end
(1..NUM_DB_INSTANCES).each do |i|
 nodes="collabn#{i} #{nodes}"
end

$etc_hosts_script = <<SCRIPT
#!/bin/bash
grep PEERDNS /etc/sysconfig/network-scripts/ifcfg-eth0 || echo 'PEERDNS=no' >> /etc/sysconfig/network-scripts/ifcfg-eth0
echo "overwriting /etc/resolv.conf"
cat > /etc/resolv.conf <<EOF
nameserver 192.168.78.51
nameserver 192.168.78.52
search racattack
EOF

cat > /etc/hosts << EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost6 localhost6.localdomain6

EOF


SCRIPT

#variable used to provide information only once
give_info ||=true

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "racattack/oracle65"

  ## Virtualbox modifications
  ## we first setup memory and cpu
  ## we create shared disks if they don't exists
  ## we later attach the disk to the vms
  ## we attach to each vm, as in the future we may want to have say 2db + 2app cluster
  ## we can attach 2 shared disk for db to the db nodes only
  ## and 2 other shared disks for the app

  if File.directory?("stagefiles")
    # our shared folder for scripts
    config.vm.synced_folder "stagefiles", "/media/stagefiles", :mount_options => ["dmode=555","fmode=444"]

    #run some scripts
    config.vm.provision :shell, :inline => $etc_hosts_script
    config.vm.provision :shell, :inline => "sh /media/stagefiles/grid_oracle_user.sh"
    config.vm.provision :shell, :inline => "sh /media/stagefiles/preinstall_crs_db.sh rac"
  end

  if File.directory?("12cR1")
    # our shared folder for oracle 12c installation files
    config.vm.synced_folder "12cR1", "/media/sf_12cR1", :mount_options => ["dmode=775","fmode=775","uid=54320","gid=54321"]
    if File.file?("12cR1/linuxamd64_12c_grid_1of2.zip")
      config.vm.provision :shell, :inline => "sh /media/sf_12cR1/cvuqdisk_install.sh"
    end
  end


  ## IMPORTANT
  ## vagrant work up to down, high node goes first
  ## so when node 1 is ready, we can configure rac and all nodes will be up

  (1..NUM_APPLICATION).each do |i|
    # this is to start machines higher to lower
    i = NUM_APPLICATION+1-i
    config.vm.define vm_name = "collaba%01d" % i do |config|
      puts " "
      config.vm.hostname = "#{vm_name}.racattack"
      lanip = "192.168.78.#{i+90}"
      puts vm_name + " eth1 lanip  :" + lanip
      config.vm.provider :virtualbox do |vb|
        vb.name = vm_name + "." + Time.now.strftime("%y%m%d%H%M")
        vb.customize ["modifyvm", :id, "--memory", MEMORY_APPLICATION]
        vb.customize ["modifyvm", :id, "--cpus", NUM_CORE]
      end
      config.vm.network :private_network, ip: lanip
    end
  end

  (1..NUM_LEAF_INSTANCES).each do |i|
    # this is to start machines higher to lower
    i = NUM_LEAF_INSTANCES+1-i
    config.vm.define vm_name = "collabl%01d" % i do |config|
      puts " "
      config.vm.hostname = "#{vm_name}.racattack"
      lanip = "192.168.78.#{i+70}"
      puts vm_name + " eth1 lanip  :" + lanip
      privip = "172.16.100.#{i+70}"
      puts vm_name + " eth2 privip :" + privip
      config.vm.provider :virtualbox do |vb|
        vb.name = vm_name + "." + Time.now.strftime("%y%m%d%H%M")
        vb.customize ["modifyvm", :id, "--memory", MEMORY_LEAF_INSTANCES]
        vb.customize ["modifyvm", :id, "--cpus", NUM_CORE]
      end
      config.vm.network :private_network, ip: lanip
      config.vm.network :private_network, ip: privip
    end
  end

  (1..NUM_DB_INSTANCES).each do |i|
    # this is to start machines higher to lower
    i = NUM_DB_INSTANCES+1-i
    config.vm.define vm_name = "collabn%01d" % i do |config|
      puts " "
      config.vm.hostname = "#{vm_name}.racattack"
      lanip = "192.168.78.#{i+50}"
      puts vm_name + " eth1 lanip  :" + lanip
      privip = "172.16.100.#{i+50}"
      puts vm_name + " eth2 privip :" + privip
      config.vm.provider :virtualbox do |vb|
        vb.name = vm_name + "." + Time.now.strftime("%y%m%d%H%M")
        vb.customize ["modifyvm", :id, "--memory", MEMORY_DB_INSTANCES]
        vb.customize ["modifyvm", :id, "--cpus", NUM_CORE]
        #first shared disk port
        port=2
        #how many shared disk
        ["1","2"].each do |disk|
          file_to_dbdisk = "racattack-shared-disk#{disk}.vdi"
          if !File.exist?(file_to_dbdisk) and NUM_DB_INSTANCES==i
            unless give_info==false
              puts "on first boot shared disks will be created, this will take some time"
              give_info=false
            end
            vb.customize ['createhd', '--filename', file_to_dbdisk, '--size', size_file_to_dbdisk * 1024, '--variant', 'fixed']
            vb.customize ['modifyhd', file_to_dbdisk, '--type', 'shareable']
          end
          vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', port, '--device', 0, '--type', 'hdd', '--medium', file_to_dbdisk]
          port=port+1
        end
      end
      config.vm.network :private_network, ip: lanip
      config.vm.network :private_network, ip: privip
      config.vm.provision :shell, :inline => "sh /media/stagefiles/asm.sh"
      if vm_name == "collabn1" 
        puts vm_name + " dns server role is master"
        config.vm.provision :shell, :inline => "sh /media/stagefiles/named_master.sh"
        if ENV['setup'] and File.file?("12cR1/linuxamd64_12c_grid_1of2.zip")
          setupssh="sh /media/sf_12cR1/sshUserSetup.sh #{nodes}"
          config.vm.provision :shell, :inline => setupssh
        end
      end
      if vm_name == "collabn2" 
        puts vm_name + " dns server role is slave"
        config.vm.provision :shell, :inline => "sh /media/stagefiles/named_slave.sh"
      end
    end
  end


  # This network is optional, that's why is at the end

  # Create a public network, which generally matched to bridged network.
  #default will ask what network to bridge
  #config.vm.network :public_network

  # OSX
  # 1) en1: Wi-Fi (AirPort)
  # 2) en0: Ethernet

  # Windows

  # Linux laptop
  # 1) wlan0
  # 2) eth0
  # 3) lxcbr0

  # Linux Desktop
  # 1) eth0
  # 2) eth1
  # 3) lxcbr0
  # 4) br0

  # on OSX to the wifi
  #config.vm.network :public_network, :bridge => 'en1: Wi-Fi (AirPort)'

end
